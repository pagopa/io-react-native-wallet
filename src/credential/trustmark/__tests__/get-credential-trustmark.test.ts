import { deleteKey, generate } from "@pagopa/io-react-native-crypto";
import { decode, type CryptoContext } from "@pagopa/io-react-native-jwt";
import { getCredentialTrustmark } from "../get-credential-trustmark";

// Wallet Instance Attestation
const walletInstanceAttestation =
  ".eyJpc3MiOiJodHRwczovL2lvLWQtd2FsbGV0LWl0LmF6dXJld2Vic2l0ZXMubmV0Iiwic3ViIjoiNG9oUGdVWFFJQS1MdmxxNFh4ZkZkSTdWRzVkU20xWW83NHo0UWtZeU1DbyIsImFhbCI6Imh0dHBzOi8vaW8tZC13YWxsZXQtaXQuYXp1cmV3ZWJzaXRlcy5uZXQvTG9BL2Jhc2ljIiwiY25mIjp7Imp3ayI6eyJjcnYiOiJQLTI1NiIsImtpZCI6InM5b1VKUExuMG4ySm1BWHp1bm9EZEVlUGpTNm9lbXRPM1YtR3AtcEZURFEiLCJrdHkiOiJFQyIsIngiOiJkb0k0YXJsN05NTC1QWXR1YlVVX3had1RWcWZBUFplRGMtYTFKTHRIdmR3IiwieSI6IlBBdWNURDJqMVNkOXU4N2Vhb2JGbE1SYW9fT1JacEJhQmFrYmVLYTVSNzgifX0sIndhbGxldF9saW5rIjoiaHR0cHM6Ly93YWxsZXQuaW8ucGFnb3BhLml0Iiwid2FsbGV0X25hbWUiOiJJVCBXYWxsZXQiLCJpYXQiOjE3MzIwMDQ1NzcsImV4cCI6MTczMjAwODE3N30.BJ1NC5omXoSjhwBtMkwopR0uQr3EhZFWoGyIR-tdfA1NpVD6NIJUkW7_-eopmPyYoXPlXsqcGvnHbNDN8eAnxw";

const wiaCryptoContext: CryptoContext = {
  getPublicKey: async () => ({
    crv: "P-256",
    kid: "s9oUJPLn0n2JmAXzunoDdEePjS6oemtO3V-Gp-pFTDQ",
    kty: "EC",
    x: "doI4arl7NML-PYtubUU_xZwTVqfAPZeDc-a1JLtHvdw",
    y: "PAucTD2j1Sd9u87eaobFlMRao_ORZpBaBakbeKa5R78",
  }),
  getSignature: async () => "",
};

describe("getCredentialTrustmarkJwt", () => {
  beforeEach(async () => {
    // Generate a fresh key before each test
    await generate("WIA_KEYTAG");
  });

  afterEach(async () => {
    jest.resetAllMocks();
    jest.clearAllMocks();
    jest.useRealTimers(); // Reset timers after each test
    await deleteKey("WIA_KEYTAG");
  });

  it("should generate a JWT with the correct payload", async () => {
    // Mock Date
    jest.useFakeTimers();
    jest.setSystemTime(new Date(1732004577000));

    const credentialType = "MDL";

    const { jwt, expirationTime } = await getCredentialTrustmark({
      walletInstanceAttestation,
      wiaCryptoContext,
      credentialType,
      docNumber: "1234567890",
      expirationTime: "2m",
    });

    const decoded = decode(jwt);
    expect(decoded.payload.iss).toBe(walletInstanceAttestation);
    expect(decoded.payload.sub).toContain("*");
    expect(decoded.payload.subtyp).toBe(credentialType);
    expect(expirationTime).toBe(1732004697);
  });

  it("should allow to configure expiration time", async () => {
    // Mock Date
    jest.useFakeTimers();
    jest.setSystemTime(new Date(1732004577000));

    const { expirationTime } = await getCredentialTrustmark({
      walletInstanceAttestation,
      wiaCryptoContext,
      credentialType: "MDL",
      docNumber: "1234567890",
      expirationTime: "10s",
    });
    expect(expirationTime).toBe(1732004587);
  });

  it("should allow to specify an exact expiration time", async () => {
    // Mock Date
    jest.useFakeTimers();
    jest.setSystemTime(new Date(1732004577000));

    const { expirationTime } = await getCredentialTrustmark({
      walletInstanceAttestation,
      wiaCryptoContext,
      credentialType: "MDL",
      docNumber: "1234567890",
      expirationTime: 1732004577,
    });
    expect(expirationTime).toBe(1732004577);
  });

  it("should throw error if wia is expired", async () => {
    // Mock Date
    jest.useFakeTimers();
    jest.setSystemTime(new Date(1832004577000));

    await expect(() =>
      getCredentialTrustmark({
        walletInstanceAttestation,
        wiaCryptoContext,
        credentialType: "MDL",
        docNumber: "1234567890",
        expirationTime: "2m",
      })
    ).rejects.toThrow();
  });

  it("should throw error if thumbprints do not match", async () => {
    const ephemeralKeytag = `ephemeral-${Math.random()}`;
    await generate(ephemeralKeytag);

    await expect(() =>
      getCredentialTrustmark({
        walletInstanceAttestation: "walletInstanceAttestation",
        wiaCryptoContext,
        credentialType: "MDL",
        docNumber: "1234567890",
      })
    ).rejects.toThrow();
  });
});
